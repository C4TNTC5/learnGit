//-C4-文档开始
I will learn How to use Git in One Day
You must work very hard so that others will not feel you work hard.
So let's work now!
Let`s go!
对readme.txt做第一次修改
对readme.txt做第二次修改
在分支dev上修改test
在分支dev上第二次修改test，修改该最后一行，用于测试冲突时的解决方案
Creating a new branch is quick and simple.
在master分支换行添加内容HIJKLMN,以便与dev分支产生冲突
在dev分支添加内容ABCDEFG
最终，在master分支合并内容，然后需要在master分支重新add、commit
系统也会记录已经dev和master应合并过，当再次运行git merge dev指令时，系统会提示已经合并过
这次修改准备禁用fast forward模式
在dev分支内，增加这一行
在dev分支内，增加这一行，这次采用--no-ff模式，即禁用fast-forward，进行合并
这次准备在dev分支内多改几次，方便在log中跟更清晰的查看
刚才貌似出问题了，重新再来
这次准备在dev分支内多修改几次，方便在log中更清晰的看fast forwad与--no-ff的区别
又出问题了，再来
这次准备在dev分支中多修改几次，方便在log中更清晰的看fast forward与--no-ff的区别：第一次

很蛋疼，再次开始
在dev中多修改几次，方便在log中查看fast forward与--no-ff的区别

创建dev分支后，在dev分支中修改，第一次修改。方便看fast forward与--no-ff的区别
创建dev分支后，在dev分支中修改，第一次修改。方便看fast forward与--no-ff的区别，第二次
创建dev分支后，在dev分支中修改，第一次修改。方便看fast forward与--no-ff的区别，第三次
在dev分支中修改，这次采用--no-ff方式合并，第一次
在dev分支中修改，这次采用--no-ff方式合并，第二次
在dev分支中修改，这次采用--no-ff方式合并，第三次
当前正在dev分支中工作，预计一周才能完成，但是需要在2小时内修复bug，当前未完成的工作自然不能提交，怎么办？？
使用git stash来隐藏当前工作现场
现在在issue-101分支上修复bug~修复完成！

新创建一个分支，用于新功能newFun的开发，现在就在新分支feature-newFun上进行编写

现在在第二个人的电脑上开始工作，当前文件夹的路径是learnGitNew/learnGit

这是新用户做出的增加————现在在第二台电脑（还是本机模拟的，另建了一个文件夹进行模拟），创建了远程分支dev到本地，现在就是在第二台电脑上对分支dev内的内容进行修改

这是老用户做出的增加————另外一个电脑在dev分支做了修改，并且已经提交到了远程仓库，在原始的这个账户上进行一些修改，修改后提交，以便重现与另一电脑文件冲突的解决办法。
合并了dev分支上的冲突，然后在老用户上继续提交

这次测试在老用户的dev分支上修改，然后在master分支通过git push origin dev来进行提交，然后看
1.能否提交成功
2.对master分支上的内容有没有影响

重新重远程拉取dev分支下来后，在本地dev分支中修改
//-C4-文档结束